import numpy as np
import tensorflow as tf
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense, Dropout
import matplotlib.pyplot as plt
from keras.wrappers.scikit_learn import KerasClassifier
import pandas as pd
from keras.utils import np_utils
from keras.layers import Dense, Conv1D, Flatten
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

X = pd.read_csv("CSVfileprev.csv")
y = pd.read_csv("targetcsvdlandnn.csv")





classes = np.unique(y)
n_classes = len(classes)
print(n_classes)
x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state = 4)
n_batch=len(x_test)



#b
model = Sequential()
#add model layers
model.add(Dense(4, input_dim=2, kernel_initializer='normal', activation='relu'))
model.add(Dense(4,input_dim=4, activation='sigmoid'))
model.add(Dense(2,input_dim=4,activation='sigmoid'))
model.add(Dense(4, activation='sigmoid', input_dim=2))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['accuracy'])




model.fit(x=x_train, y=y_train, epochs=700,batch_size=32,validation_split=0.3)

score = model.evaluate(x_test, y_test, verbose = 0)

print("Test score: ", score[0])
print("Test accuracy: ", score[1])

loss, accuracy = model.evaluate(X, y)
print("\nLoss: %.2f, Accuracy: %.2f%%" % (loss, accuracy*100))

import numpy as np
import cv2
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

face_cascade=cv2.CascadeClassifier('haarcascade_frontalface.xml')
mouth_cascade=cv2.CascadeClassifier('haarcascade_mcs_mouth.xml')
img = cv2.imread('pico.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
faces = face_cascade.detectMultiScale(gray, 1.3, 5)
for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h),(255, 255, 0), 2)
        roi_grey = gray[y:y + h, x:x + w]
        roi_image = img[y:y + h, x:x + w]
        mouth = mouth_cascade.detectMultiScale(roi_grey)
        count=0
        for (ex, ey, ew, eh) in mouth :
            if count ==2:
                cv2.rectangle(roi_image, (ex, ey), (ex + ew, ey + eh),(0, 255, 0), 2)
                print(ew,eh)
            count=count+1
                
            
cv2_imshow(img)

import csv

row = [ew, eh]


with open('people9.csv', 'a') as csvFile:
    writer = csv.writer(csvFile)
    writer.writerow(row)

csvFile.close()
hehehe = pd.read_csv("people9.csv")


pred=model.predict(hehehe, verbose=0, steps=None)
for row in pred:
  if row<0.186:
    print("Surprised!")
  else:
    print("Happy :)")
   
